/**
 * @fileoverview Firestore Security Rules for the POTS Tracker app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access their own data,
 * preventing unauthorized access to other users' information.  Schema validation is relaxed to
 * allow rapid iteration during the prototyping phase.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership and isolation.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent potential information leakage.
 * - All write operations are restricted to the owner of the data.
 * - Data consistency between the path and document fields (userId) is enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user is the owner of the resource.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the authenticated user is the owner of the resource and if the resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID 'user456'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own symptom logs.
     * @path /users/{userId}/symptom_logs/{symptomLogId}
     * @allow (create) User 'user123' can create a symptom log entry.
     * @deny (update) User 'user123' cannot update a symptom log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/symptom_logs/{symptomLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

       /**
     * @description Allows a user to manage their own activity logs.
     * @path /users/{userId}/activity_logs/{activityLogId}
     * @allow (list) User 'Ih612rAOa0TV4rhKrduyksRkbB02' can list own activity log entries.
     * @allow (create) User 'user123' can create an activity log entry.
     * @deny (update) User 'user123' cannot update an activity log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/activity_logs/{activityLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own exercise logs.
     * @path /users/{userId}/exercise_logs/{exerciseLogId}
     * @allow (create) User 'user123' can create an exercise log entry.
     * @deny (update) User 'user123' cannot update an exercise log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/exercise_logs/{exerciseLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own volume expansion logs.
     * @path /users/{userId}/volume_expansion_logs/{volumeExpansionLogId}
     * @allow (create) User 'user123' can create a volume expansion log entry.
     * @deny (update) User 'user123' cannot update a volume expansion log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/volume_expansion_logs/{volumeExpansionLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own sleep position logs.
     * @path /users/{userId}/sleep_position_logs/{sleepPositionLogId}
     * @allow (create) User 'user123' can create a sleep position log entry.
     * @deny (update) User 'user123' cannot update a sleep position log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sleep_position_logs/{sleepPositionLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own compression garment logs.
     * @path /users/{userId}/compression_garment_logs/{compressionGarmentLogId}
     * @allow (create) User 'user123' can create a compression garment log entry.
     * @deny (update) User 'user123' cannot update a compression garment log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/compression_garment_logs/{compressionGarmentLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own physical countermeasure logs.
     * @path /users/{userId}/physical_countermeasure_logs/{physicalCountermeasureLogId}
     * @allow (create) User 'user123' can create a physical countermeasure log entry.
     * @deny (update) User 'user123' cannot update a physical countermeasure log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/physical_countermeasure_logs/{physicalCountermeasureLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own skin surface cooling logs.
     * @path /users/{userId}/skin_surface_cooling_logs/{skinSurfaceCoolingLogId}
     * @allow (create) User 'user123' can create a skin surface cooling log entry.
     * @deny (update) User 'user123' cannot update a skin surface cooling log entry owned by 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/skin_surface_cooling_logs/{skinSurfaceCoolingLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}