/**
 * @fileoverview Firestore Security Rules for POTS Tracker app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own data, preventing unauthorized access to other users'
 * information. This applies to user profiles and all associated log entries.
 *
 * Data Structure:
 * The data is organized hierarchically under the `/users/{userId}` path. Each user
 * has a profile document and subcollections for various types of logs:
 * - /users/{userId} (UserProfile)
 * - /users/{userId}/symptom_logs/{symptomLogId} (SymptomLog)
 * - /users/{userId}/exercise_logs/{exerciseLogId} (ExerciseLog)
 * - /users/{userId}/volume_expansion_logs/{volumeExpansionLogId} (VolumeExpansionLog)
 * - /users/{userId}/sleep_position_logs/{sleepPositionLogId} (SleepPositionLog)
 * - /users/{userId}/compression_garment_logs/{compressionGarmentLogId} (CompressionGarmentLog)
 * - /users/{userId}/physical_countermeasure_logs/{physicalCountermeasureLogId} (PhysicalCountermeasureLog)
 * - /users/{userId}/skin_surface_cooling_logs/{skinSurfaceCoolingLogId} (SkinSurfaceCoolingLog)
 *
 * Key Security Decisions:
 * - User profiles and all log data are strictly private to the owning user.
 * - Listing of user profiles is disallowed to prevent enumeration.
 * - All write operations are validated to ensure the authenticated user is the owner.
 *
 * Denormalization for Authorization:
 *  - All log entries contain the `userId` field, which is used to enforce ownership and avoid `get()` calls in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the UserProfile document.  Only the owner can read or write their own profile. Listing all profiles is disallowed.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile.
     * @allow (get) If the user is reading their own profile.
     * @allow (update) If the user is updating their own profile.
     * @allow (delete) If the user is deleting their own profile.
     * @deny (list) Listing all user profiles is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the SymptomLog subcollection.  Only the owner can read or write their own logs.
     * @path /users/{userId}/symptom_logs/{symptomLogId}
     * @allow (create) If the user is creating a new log in their own profile.
     * @allow (get) If the user is reading a log in their own profile.
     * @allow (list) If the user is listing logs in their own profile.
     * @allow (update) If the user is updating a log in their own profile.
     * @allow (delete) If the user is deleting a log in their own profile.
     * @deny If a user attempts to access logs belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/symptom_logs/{symptomLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the ExerciseLog subcollection.  Only the owner can read or write their own logs.
     * @path /users/{userId}/exercise_logs/{exerciseLogId}
     * @allow (create) If the user is creating a new log in their own profile.
     * @allow (get) If the user is reading a log in their own profile.
     * @allow (list) If the user is listing logs in their own profile.
     * @allow (update) If the user is updating a log in their own profile.
     * @allow (delete) If the user is deleting a log in their own profile.
     * @deny If a user attempts to access logs belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/exercise_logs/{exerciseLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the VolumeExpansionLog subcollection.  Only the owner can read or write their own logs.
     * @path /users/{userId}/volume_expansion_logs/{volumeExpansionLogId}
     * @allow (create) If the user is creating a new log in their own profile.
     * @allow (get) If the user is reading a log in their own profile.
     * @allow (list) If the user is listing logs in their own profile.
     * @allow (update) If the user is updating a log in their own profile.
     * @allow (delete) If the user is deleting a log in their own profile.
     * @deny If a user attempts to access logs belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/volume_expansion_logs/{volumeExpansionLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the SleepPositionLog subcollection.  Only the owner can read or write their own logs.
     * @path /users/{userId}/sleep_position_logs/{sleepPositionLogId}
     * @allow (create) If the user is creating a new log in their own profile.
     * @allow (get) If the user is reading a log in their own profile.
     * @allow (list) If the user is listing logs in their own profile.
     * @allow (update) If the user is updating a log in their own profile.
     * @allow (delete) If the user is deleting a log in their own profile.
     * @deny If a user attempts to access logs belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/sleep_position_logs/{sleepPositionLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the CompressionGarmentLog subcollection.  Only the owner can read or write their own logs.
     * @path /users/{userId}/compression_garment_logs/{compressionGarmentLogId}
     * @allow (create) If the user is creating a new log in their own profile.
     * @allow (get) If the user is reading a log in their own profile.
     * @allow (list) If the user is listing logs in their own profile.
     * @allow (update) If the user is updating a log in their own profile.
     * @allow (delete) If the user is deleting a log in their own profile.
     * @deny If a user attempts to access logs belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/compression_garment_logs/{compressionGarmentLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the PhysicalCountermeasureLog subcollection.  Only the owner can read or write their own logs.
     * @path /users/{userId}/physical_countermeasure_logs/{physicalCountermeasureLogId}
     * @allow (create) If the user is creating a new log in their own profile.
     * @allow (get) If the user is reading a log in their own profile.
     * @allow (list) If the user is listing logs in their own profile.
     * @allow (update) If the user is updating a log in their own profile.
     * @allow (delete) If the user is deleting a log in their own profile.
     * @deny If a user attempts to access logs belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/physical_countermeasure_logs/{physicalCountermeasureLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the SkinSurfaceCoolingLog subcollection.  Only the owner can read or write their own logs.
     * @path /users/{userId}/skin_surface_cooling_logs/{skinSurfaceCoolingLogId}
     * @allow (create) If the user is creating a new log in their own profile.
     * @allow (get) If the user is reading a log in their own profile.
     * @allow (list) If the user is listing logs in their own profile.
     * @allow (update) If the user is updating a log in their own profile.
     * @allow (delete) If the user is deleting a log in their own profile.
     * @deny If a user attempts to access logs belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/skin_surface_cooling_logs/{skinSurfaceCoolingLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userProfileId == resource.data.userProfileId;
      allow delete: if isExistingOwner(userId);
    }
  }
}