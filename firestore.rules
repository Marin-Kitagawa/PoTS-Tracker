/**
 * @fileoverview Firestore Security Rules for the POTS Tracker app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * read and write data associated with their own user ID.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, ensuring that each user's
 * data is isolated. Each data type (symptom logs, exercise logs, etc.)
 * resides in its own subcollection.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - All write operations are protected by an authorization check to ensure
 *   the user is the owner of the data.
 * - In the case of the user profile document, a user can only create their own profile
 * - The default security posture for ambiguous relationships is strict
 *   owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *   Request: auth.uid = 'user123', resource.data.id = 'user123'
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     *   Request: auth.uid = 'user123', resource.data.id = 'user456'
     * @principle Enforces user-ownership; only the authenticated user can create their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for symptom log entries.
     * @path /users/{userId}/symptom_logs/{symptomLogId}
     * @allow (create) User with ID 'user123' creates a symptom log.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' tries to create a symptom log for 'user456'.
     *   Request: auth.uid = 'user123'
     * @principle Enforces user-ownership; only the authenticated user can create logs for themselves.
     */
    match /users/{userId}/symptom_logs/{symptomLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for exercise log entries.
      * @path /users/{userId}/exercise_logs/{exerciseLogId}
      * @allow (create) User with ID 'user123' creates an exercise log.
      *   Request: auth.uid = 'user123'
      * @deny (create) User with ID 'user123' tries to create an exercise log for 'user456'.
      *   Request: auth.uid = 'user123'
      * @principle Enforces user-ownership; only the authenticated user can create logs for themselves.
      */
    match /users/{userId}/exercise_logs/{exerciseLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for volume expansion log entries.
     * @path /users/{userId}/volume_expansion_logs/{volumeExpansionLogId}
     * @allow (create) User with ID 'user123' creates a volume expansion log.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' tries to create a volume expansion log for 'user456'.
     *   Request: auth.uid = 'user123'
     * @principle Enforces user-ownership; only the authenticated user can create logs for themselves.
     */
    match /users/{userId}/volume_expansion_logs/{volumeExpansionLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sleep position log entries.
     * @path /users/{userId}/sleep_position_logs/{sleepPositionLogId}
     * @allow (create) User with ID 'user123' creates a sleep position log.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' tries to create a sleep position log for 'user456'.
     * @principle Enforces user-ownership; only the authenticated user can create logs for themselves.
     */
    match /users/{userId}/sleep_position_logs/{sleepPositionLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for compression garment log entries.
     * @path /users/{userId}/compression_garment_logs/{compressionGarmentLogId}
     * @allow (create) User with ID 'user123' creates a compression garment log.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' tries to create a compression garment log for 'user456'.
     * @principle Enforces user-ownership; only the authenticated user can create logs for themselves.
     */
    match /users/{userId}/compression_garment_logs/{compressionGarmentLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for physical countermeasure log entries.
     * @path /users/{userId}/physical_countermeasure_logs/{physicalCountermeasureLogId}
     * @allow (create) User with ID 'user123' creates a physical countermeasure log.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' tries to create a physical countermeasure log for 'user456'.
     * @principle Enforces user-ownership; only the authenticated user can create logs for themselves.
     */
    match /users/{userId}/physical_countermeasure_logs/{physicalCountermeasureLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for skin surface cooling log entries.
     * @path /users/{userId}/skin_surface_cooling_logs/{skinSurfaceCoolingLogId}
     * @allow (create) User with ID 'user123' creates a skin surface cooling log.
     *   Request: auth.uid = 'user123'
     * @deny (create) User with ID 'user123' tries to create a skin surface cooling log for 'user456'.
     * @principle Enforces user-ownership; only the authenticated user can create logs for themselves.
     */
    match /users/{userId}/skin_surface_cooling_logs/{skinSurfaceCoolingLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}